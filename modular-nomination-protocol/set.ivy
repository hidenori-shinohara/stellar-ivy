#lang ivy1.7

# A module to deal with basic set theory stuff.
module set(t) = {
    type this
    relation member(E:t,S:this)

    individual emptyset : this
    axiom forall E. ~member(E,emptyset)

    individual universe : this
    axiom forall E. member(E,universe)

#    relation is_empty(S:this)
#    definition is_empty(S) = forall X. ~member(X, S)
#
#    ## Union
#    relation union(U:this, V:this, UV:this)
#    definition union(U, V, UV) = forall X. (member(X, U) | member(X, V)) <-> member(X, UV)
#
#    ## Intersection
#    relation intersection(U:this, V:this, UV:this)
#    definition intersection(U, V, UV) = forall X. (member(X, U) & member(X, V)) <-> member(X, UV)
#
#    ## Subset
#    relation subset(S:this, T:this)
#    definition subset(S, T) = forall N. member(N, S) -> member(N, T)
#
#    ## Subtract (S \ T = U)
#    relation subtract(S:this, T:this, U:this)
#    definition subtract(S, T, U) = forall N. (member(N, S) & ~member(N, T)) <-> member(N, U)
#
#    individual empty_set : this
#    axiom forall E. ~member(E,empty_set)
#
}
