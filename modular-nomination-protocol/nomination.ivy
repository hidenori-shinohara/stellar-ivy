#lang ivy1.7

include node
include network

# The type of node identities (eg. public keys / IP addresses or such)
type id_t

# The type of values being voted-on.
type val_t

# We have one network module for specifying network-wide properties.
instance net : network(id_t, val_t)

# And we have a _set_ of node modules, one per element of the opaque id_t type,
# for specifying properties local to a single node. Each node gets told its own
# identity via the second parameter ID.
instance nodes(ID:id_t) : node(id_t, ID, val_t)

# Allow IVy to cause any number of vote_for actions to initiate activities on
# individual nodes.
export nodes(ID).intf.vote_for

# Additionally, any time the state of the world allows it (eg. there are messages
# to receive in the network), we can initiate a receive action on a node.
# I'm not sure if we want to expose this to IVy.
# I think IVy should call deliver_vote and deliver_accept, and
# those two methods in turn call recv_vote and recv_accept.
# export nodes(ID).intf.recv_vote
# export nodes(ID).intf.recv_accept

# Or .. possibly we want to allow initiating messages from the network side?
export net.intf.broadcast_vote
export net.intf.deliver_vote
export net.intf.broadcast_accept
export net.intf.deliver_accept
