#lang ivy1.7

module network(id_t, val_t) = {

    object intf = {
        # Network can be called src a node sending a message.
        action broadcast_vote(src:id_t, value:val_t)
        action broadcast_accept(src:id_t, value:val_t)

        # Network can also be "called" spontaneously to note the
        # delivery of a message at a node.
        action deliver_vote(src:id_t, dst:id_t, value:val_t)
        action deliver_accept(src:id_t, dst:id_t, value:val_t)
    }


    object spec = {
        relation have_broadcast_vote(SRC:id_t, VALUE:val_t)
        relation have_broadcast_accept(SRC:id_t, VALUE:val_t)
        relation have_delivered_vote(SRC:id_t, DST:id_t, VALUE:val_t)
        relation have_delivered_accept(SRC:id_t, DST:id_t, VALUE:val_t)

        before intf.broadcast_vote {
            require nodes(src).spec.have_voted(value);
        }
        after intf.broadcast_vote {
            have_broadcast_vote(src, value) := true
        }

        before intf.deliver_vote {
            require have_broadcast_vote(src, value);
            # Remove this next condition to allow message duplication.
            require ~have_delivered_vote(src, dst, value);
        }
        after intf.deliver_vote {
            call nodes(dst).intf.recv_vote(src, value);
            spec.have_delivered_vote(src, dst, value) := true;
        }
        # If a ndoe accepts something,
        # that's something that some node must have voted for.
        invariant forall ID, VALUE. nodes(ID).spec.have_accepted(VALUE) -> (exists OTHER. nodes(OTHER).spec.have_voted(VALUE))
    }

    object impl = {
        relation something_private(X:id_t)
        implement intf.broadcast_vote {
            something_private(src) := true
        }
        implement intf.deliver_vote {
            something_private(src) := true
        }
    }
}
